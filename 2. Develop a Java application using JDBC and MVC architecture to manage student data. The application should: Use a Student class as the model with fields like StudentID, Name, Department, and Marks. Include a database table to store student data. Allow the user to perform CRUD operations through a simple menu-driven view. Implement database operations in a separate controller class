 1. SQL Setup (Run this in MySQL)

CREATE DATABASE StudentDB;
USE StudentDB;

CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(100),
    Department VARCHAR(50),
    Marks DOUBLE
);

2. model/Student.java

package model;

public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }

    public void setName(String name) { this.name = name; }
    public void setDepartment(String department) { this.department = department; }
    public void setMarks(double marks) { this.marks = marks; }

    @Override
    public String toString() {
        return String.format("ID: %d | Name: %s | Dept: %s | Marks: %.2f",
                studentID, name, department, marks);
    }
}

 3. controller/StudentController.java

package controller;

import model.Student;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentController {
    private final String url = "jdbc:mysql://localhost:3306/StudentDB";
    private final String user = "root"; // change to your DB user
    private final String pass = "password"; // change to your DB password

    public Connection connect() throws SQLException {
        return DriverManager.getConnection(url, user, pass);
    }

    public boolean addStudent(Student student) {
        String sql = "INSERT INTO Students (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (Connection conn = connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, student.getStudentID());
            stmt.setString(2, student.getName());
            stmt.setString(3, student.getDepartment());
            stmt.setDouble(4, student.getMarks());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
            return false;
        }
    }

    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Students";
        try (Connection conn = connect(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                students.add(new Student(
                        rs.getInt("StudentID"),
                        rs.getString("Name"),
                        rs.getString("Department"),
                        rs.getDouble("Marks")
                ));
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
        return students;
    }

    public boolean updateStudent(Student student) {
        String sql = "UPDATE Students SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (Connection conn = connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, student.getName());
            stmt.setString(2, student.getDepartment());
            stmt.setDouble(3, student.getMarks());
            stmt.setInt(4, student.getStudentID());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
            return false;
        }
    }

    public boolean deleteStudent(int studentID) {
        String sql = "DELETE FROM Students WHERE StudentID=?";
        try (Connection conn = connect(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, studentID);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
            return false;
        }
    }
}

4. view/StudentView.java

package view;

import controller.StudentController;
import model.Student;

import java.util.List;
import java.util.Scanner;

public class StudentView {
    private final StudentController controller = new StudentController();
    private final Scanner scanner = new Scanner(System.in);

    public void menu() {
        while (true) {
            System.out.println("\n--- Student Management Menu ---");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt(); scanner.nextLine();

            switch (choice) {
                case 1: addStudent(); break;
                case 2: viewStudents(); break;
                case 3: updateStudent(); break;
                case 4: deleteStudent(); break;
                case 5: System.out.println("Exiting..."); return;
                default: System.out.println("Invalid choice!");
            }
        }
    }

    private void addStudent() {
        System.out.print("Enter ID: ");
        int id = scanner.nextInt(); scanner.nextLine();

        System.out.print("Enter Name: ");
        String name = scanner.nextLine();

        System.out.print("Enter Department: ");
        String dept = scanner.nextLine();

        System.out.print("Enter Marks: ");
        double marks = scanner.nextDouble();

        Student s = new Student(id, name, dept, marks);
        if (controller.addStudent(s)) {
            System.out.println("Student added.");
        } else {
            System.out.println("Failed to add student.");
        }
    }

    private void viewStudents() {
        List<Student> students = controller.getAllStudents();
        if (students.isEmpty()) {
            System.out.println("No students found.");
        } else {
            for (Student s : students) {
                System.out.println(s);
            }
        }
    }

    private void updateStudent() {
        System.out.print("Enter ID of student to update: ");
        int id = scanner.nextInt(); scanner.nextLine();

        System.out.print("Enter new Name: ");
        String name = scanner.nextLine();

        System.out.print("Enter new Department: ");
        String dept = scanner.nextLine();

        System.out.print("Enter new Marks: ");
        double marks = scanner.nextDouble();

        Student s = new Student(id, name, dept, marks);
        if (controller.updateStudent(s)) {
            System.out.println("Student updated.");
        } else {
            System.out.println("Update failed.");
        }
    }

    private void deleteStudent() {
        System.out.print("Enter ID to delete: ");
        int id = scanner.nextInt();
        if (controller.deleteStudent(id)) {
            System.out.println("Student deleted.");
        } else {
            System.out.println("Delete failed.");
        }
    }
}


5. Main.java

import view.StudentView;

public class Main {
    public static void main(String[] args) {
        StudentView view = new StudentView();
        view.menu();
    }
}
